# ---------------------------
# Namespace for monitoring stack
# ---------------------------
resource "kubernetes_namespace" "otel_collector" {
  metadata {
    name = "otel-collector"
    annotations = {
      "sidecar.opentelemetry.io/inject" = "true"
    }
  }

  lifecycle {
    ignore_changes = [
      metadata[0].annotations["cattle.io/status"],
      metadata[0].annotations["lifecycle.cattle.io/create.namespace-auth"],
    ]
  }
}

# ---------------------------
# Service Account for Collector
# ---------------------------
resource "kubernetes_service_account_v1" "otel_collector" {
  metadata {
    name      = "otel-collector"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
  }
}

# ---------------------------
# ConfigMap for OpenTelemetry Collector
# ---------------------------
resource "kubernetes_config_map_v1" "otel_collector_config" {
  metadata {
    name      = "otel-collector-config"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
  }
  data = {
    "config.yaml" = file("otel-collector-config.yaml")
  }
  depends_on = [kubernetes_namespace.otel_collector]
}

# ---------------------------
# Service for OpenTelemetry Collector
# ---------------------------
resource "kubernetes_service_v1" "otel_collector" {
  metadata {
    name      = "otel-collector"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
    labels = {
      app       = "opentelemetry"
      component = "otel-collector"
    }
  }
  spec {
    selector = {
      app       = "opentelemetry"
      component = "otel-collector"
    }

    port {
      port        = 4317
      target_port = 4317
      protocol    = "TCP"
      name        = "otel-grpc"
    }
    port {
      port        = 4318
      target_port = 4318
      protocol    = "TCP"
      name        = "otel-http"
    }
    port {
      port        = 8889
      target_port = 8889
      protocol    = "TCP"
      name        = "prom-metrics"
    }
    port {
      port        = 55679
      target_port = 55679
      protocol    = "TCP"
      name        = "zpages"
    }
  }
}

# ---------------------------
# Deployment for OpenTelemetry Collector
# ---------------------------
resource "kubernetes_deployment_v1" "otel_collector" {
  metadata {
    name      = "otel-collector"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
    labels = {
      app       = "opentelemetry"
      component = "otel-collector"
    }
  }

  spec {
    replicas = 1
    selector {
      match_labels = {
        app       = "opentelemetry"
        component = "otel-collector"
      }
    }

    template {
      metadata {
        labels = {
          app       = "opentelemetry"
          component = "otel-collector"
        }
      }
      spec {
        service_account_name = kubernetes_service_account_v1.otel_collector.metadata[0].name

        container {
          name  = "otel-collector"
          image = "otel/opentelemetry-collector-contrib:0.97.0"

          args = ["--config=/etc/otelcol-contrib/config.yaml"]

          volume_mount {
            name       = "otel-collector-config"
            mount_path = "/etc/otelcol-contrib/config.yaml"
            sub_path   = "config.yaml"
            read_only  = true
          }

          resources {
            limits = {
              memory = "2Gi"
            }
            requests = {
              cpu    = "200m"
              memory = "400Mi"
            }
          }

          port {
            container_port = 4317
            name           = "otel-grpc"
          }
          port {
            container_port = 4318
            name           = "otel-http"
          }
          port {
            container_port = 8889
            name           = "prom-metrics"
          }
          port {
            container_port = 55679
            name           = "zpages"
          }
        }

        volume {
          name = "otel-collector-config"
          config_map {
            name = kubernetes_config_map_v1.otel_collector_config.metadata[0].name
          }
        }
      }
    }
  }
}

# ==========================================================
# PROMETHEUS SECTION
# ==========================================================

# ---------------------------
# ConfigMap for Prometheus configuration
# ---------------------------
resource "kubernetes_config_map_v1" "prometheus_config" {
  metadata {
    name      = "prometheus-config"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
  }
  data = {
    "prometheus.yml" = yamlencode({
      global = {
        scrape_interval = "15s"
      }
      scrape_configs = [
        {
          job_name     = "otel-collector"
          metrics_path = "/metrics"
          static_configs = [
            {
              targets = ["otel-collector.otel-collector.svc.cluster.local:8889"]
            }
          ]
        }
      ]
    })
  }
}

# ---------------------------
# Deployment for Prometheus
# ---------------------------
resource "kubernetes_deployment_v1" "prometheus" {
  metadata {
    name      = "prometheus"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
    labels = {
      app = "prometheus"
    }
  }
  spec {
    replicas = 1
    selector {
      match_labels = {
        app = "prometheus"
      }
    }
    template {
      metadata {
        labels = {
          app = "prometheus"
        }
      }
      spec {
        container {
          name  = "prometheus"
          image = "prom/prometheus:v2.46.0"
          args = [
            "--config.file=/etc/prometheus/prometheus.yml",
            "--storage.tsdb.path=/prometheus",
            "--web.console.libraries=/usr/share/prometheus/console_libraries",
            "--web.console.templates=/usr/share/prometheus/consoles"
          ]
          port {
            container_port = 9090
            name           = "web"
          }
          volume_mount {
            name       = "config-volume"
            mount_path = "/etc/prometheus"
          }
          volume_mount {
            name       = "data"
            mount_path = "/prometheus"
          }
        }
        volume {
          name = "config-volume"
          config_map {
            name = kubernetes_config_map_v1.prometheus_config.metadata[0].name
          }
        }
        volume {
          name = "data"
          empty_dir {}
        }
      }
    }
  }
}

# ---------------------------
# Service for Prometheus
# ---------------------------
resource "kubernetes_service_v1" "prometheus" {
  metadata {
    name      = "prometheus"
    namespace = kubernetes_namespace.otel_collector.metadata[0].name
  }
  spec {
    selector = {
      app = "prometheus"
    }
    port {
      name        = "web"
      port        = 9090
      target_port = 9090
    }
    type = "ClusterIP"
  }
}
